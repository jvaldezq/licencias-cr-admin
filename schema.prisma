generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Location {
  id          String   @id @default(uuid())
  name        String   @unique
  status      Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assets      Asset[]
  events      Event[]
  tasks       Task[]
  instructors User[]
  prices      Price[]
  basePrices  BasePrice[]
}

model LicenseType {
  id                 String               @id @default(uuid())
  name               String               @unique
  color              String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  events             Event[]
  assets             Asset[]
  schoolPrices       SchoolPrices[]
  prices             Price[]
}

model Asset {
  id                 String              @id @default(uuid())
  name               String              @unique
  plate              String              @unique
  status             Boolean
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  locationId         String
  location           Location            @relation(fields: [locationId], references: [id])
  events             Event[]
  licenseTypeId      String
  licenseType        LicenseType            @relation(fields: [licenseTypeId], references: [id])
  schedule           Schedule[]
  tasks              Task[]
  Log                Log[]
  note               String?
  coolantDate        DateTime?        @default(now())
  oilDate            DateTime?        @default(now())
  inspection         DateTime?        @default(now())
}

model User {
  id                 String      @id @default(uuid())
  authId             String      @unique
  name               String
  locationId         String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  eventsAsCreator    Event[]     @relation("CreatorRelation")
  eventsAsInstructor Event[]     @relation("InstructorRelation")
  tasksAsAssignedTo  Task[]      @relation("TaskAssignedTo")
  tasksAsCreator     Task[]      @relation("TaskCreatorRelation")
  logs               Log[]
  location           Location?    @relation(fields: [locationId], references: [id])
  access             UserAccess?
  schedule           Schedule[]
  assetMaintenance   AssetMaintenance[]
  cashPaymentsAdvance     CashPaymentsAdvance[]
}

model UserAccess {
  id           String   @id @default(uuid())
  admin        Boolean  @default(false)
  instructor   Boolean  @default(false)
  receptionist Boolean  @default(false)
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Event {
  id            String       @id @default(uuid())
  status        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  assetId       String?
  asset         Asset?       @relation(fields: [assetId], references: [id])
  createdById   String
  createdBy     User         @relation("CreatorRelation", fields: [createdById], references: [id])
  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id])
  instructorId  String?
  instructor    User?        @relation("InstructorRelation", fields: [instructorId], references: [id])
  licenseTypeId String
  licenseType   LicenseType @relation(fields: [licenseTypeId], references: [id])
  locationId    String
  location      Location     @relation(fields: [locationId], references: [id])
  paymentId     String       @unique
  payment       Payment      @relation(fields: [paymentId], references: [id])
  date          DateTime?
  time          String?
  typeId        String
  notes         String?
  isInternalReferred    Boolean?      @default(false)
  isExternalReferred    Boolean?      @default(false)
  schoolId      String?
  school        School?     @relation(fields: [schoolId], references: [id])
  hasMedical    Boolean      @default(false)
  hasBeenContacted      Boolean?      @default(false)
  noShow       Boolean?      @default(false)
  type          EventType    @relation(fields: [typeId], references: [id])
  Log Log[]

  @@index([instructorId, createdById, date, paymentId, customerId, locationId, licenseTypeId])
}

model Customer {
  id             String   @id @default(uuid())
  name           String
  identification String
  phone          String
  testPassed     Boolean? @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  event          Event[]
  scheduleId     String? @unique
  schedule       Schedule?    @relation(fields: [scheduleId], references: [id])
}

model School {
  id             String   @id @default(uuid())
  name           String
  status         Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  schoolPrices   SchoolPrices[]
  Event          Event[]
}

model SchoolPrices {
  id             String   @id @default(uuid())
  internalPrice  String
  externalPrice  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  schoolId       String?
  school         School?  @relation(fields: [schoolId], references: [id])
  licenseTypeId  String?  @unique
  licenseType    LicenseType?  @relation(fields: [licenseTypeId], references: [id])
}

model Schedule {
  id                  String   @id @default(uuid())
  startTime           String?
  endTime             String?
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  assetId             String?
  asset               Asset?       @relation(fields: [assetId], references: [id])
  userId              String?
  user                User?     @relation(fields: [userId], references: [id])
  customer            Customer?
}

model Payment {
  id                      String   @id @default(uuid())
  price                   Float?
  cashAdvance             Float?
  paid                    Boolean?  @default(false)
  paidDate                DateTime?
  cashPaymentsAdvance     CashPaymentsAdvance[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  event                   Event?
}

model CashPaymentsAdvance {
  id          String   @id @default(uuid())
  amount      Float
  type        String
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  paymentId   String
  payment     Payment    @relation(fields: [paymentId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EventType {
  id        String   @id @default(uuid())
  name      String   @unique
  color     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model Log {
  id          String   @id @default(uuid())
  title       String
  message     String
  assetId     String?
  asset       Asset?       @relation(fields: [assetId], references: [id])
  eventId     String?
  event       Event?    @relation(fields: [eventId], references: [id])
  taskId      String?
  task        Task?    @relation(fields: [taskId], references: [id])
  createdAt   DateTime @default(now())
  changedById String
  changedBy   User     @relation(fields: [changedById], references: [id])
}

model Task {
  id            String       @id @default(uuid())
  status        String
  title         String
  assetId       String?
  asset         Asset?       @relation(fields: [assetId], references: [id])
  locationId    String
  location      Location     @relation(fields: [locationId], references: [id])
  date          DateTime?
  notes         String?
  Log           Log[]
  assignedToId  String?
  assignedTo    User?        @relation("TaskAssignedTo", fields: [assignedToId], references: [id])
  createdById   String
  createdBy     User         @relation("TaskCreatorRelation", fields: [createdById], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Supplier {
  id            String       @id @default(uuid())
  name          String?
  category      String?
  businessName  String
  phone         String
  address       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Price {
  id            String       @id @default(uuid())
  title         String?
  note          String?
  price         Float?
  offerPrice    Float?
  offerEndDate  DateTime?
  licenseTypeId String
  licenseType   LicenseType @relation(fields: [licenseTypeId], references: [id])
  locationId    String
  location      Location     @relation(fields: [locationId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model BasePrice {
  id            String       @id @default(uuid())
  note          String?
  description   String
  priceClient   Float?
  priceSchool   Float?
  locationId    String
  location      Location     @relation(fields: [locationId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model AssetMaintenance {
  id                 String              @id @default(uuid())
  description        String              @unique
  createdById        String
  createdBy          User                @relation(fields: [createdById], references: [id])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}